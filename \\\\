
#include <utility>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <WinSock2.h>
#include <windows.h>
#include <time.h>
using namespace std;
#include <map>

#ifndef DEFINITION_H_INCLUDED
#define DEFINITION_H_INCLUDED

#pragma once

#define BUFSIZE 1024 //最大报文缓存大小
#define PORT 53   //53端口号
#define DEF_DNS_ADDRESS "223.5.5.5"	//ipconfig/all 得知外部服务器dns地址
#define LOCAL_DNS_ADDRESS "127.0.0.1" //本地DNS服务器地址
#define AMOUNT 1500//最大ID转换表大小
#define NOTFOUND 32767 //没有找到
#define lengthURL  64 //0~63

//DNS报文首部 12字节
typedef struct DNSHeader
{
	unsigned short ID; //标志
	unsigned short Flags; //标识
	unsigned short QuestionNum;  //问题数
	unsigned short AnswerNum; //资源记录数
	unsigned short AuthorNum; //授权资源记录数
	unsigned short AdditionNum; //额外资源记录数
} DNSHDR, * pDNSHDR;


//ID转换表结构
typedef struct ID_Change
{
	unsigned short oid;			//原有ID
	BOOL done;						//标记是否完成解析
	SOCKADDR_IN client;				//请求者套接字地址
} ID_trans;

#endif 

#pragma  comment(lib, "Ws2_32.lib") //加载 ws2_32.dll


ID_trans id_trans_table[AMOUNT];	//ID转换表
int IDcount = 0;					//转换表中的条目个数
char Url[lengthURL];					//域名
SYSTEMTIME TimeOfSys;                     //系统时间
int Day, Hour, Minute, Second, Milliseconds;//保存系统时间的变量

map<const char*, const char*>ip_domain_Map;//DNS域名解析表

void read(const char* filename) {
	FILE* file = fopen(filename, "r");
	if (file == NULL) {
		printf("Failed to open file.\n");
		exit(0);
	}
	printf("Try to load table  % s ... OK\n", filename);
	char line[256];

	int NameCount = 0;
	int ByteCount = 0;

	while (fgets(line, sizeof(line), file) != NULL) {
		const char* ip = strtok(line, " \t\n");
		const char* domain = strtok(NULL, " \t\n");

		if (ip == NULL || domain == NULL) continue;

		ByteCount += sizeof(ip) + sizeof(domain);

		std::pair<const char*, const char*>Pair;
		Pair.first = domain;
		Pair.second = ip;
		//printf("%s   %s\n",ip,domain);
		// 分配内存并存储IP和域名
		ip_domain_Map.insert(Pair);
		NameCount++;
	}

	printf("%d names, occupy %d bytes memory\n ", NameCount, ByteCount);

	fclose(file);
	//return NameCount;
}
// 查找域名对应的IP地址

const char* findIP(const char* domain) {
	auto it = ip_domain_Map.find(domain);
	if (it != ip_domain_Map.end())
		return it->second;
	return NULL;
}

//获取DNS请求中的域名
void GetUrl(char* recvbuf, int recvnum)
{
	char urlname[lengthURL];
	int i = 0, j, k = 0;

	memset(Url, 0, lengthURL); //全用0初始化
	memcpy(urlname, &(recvbuf[sizeof(DNSHDR)]), recvnum - 12);	//获取请求报文中的域名表示，要去掉DNS报文首部的12字节

	int len = strlen(urlname);

	//域名转换
	while (i < len)
	{
		if (urlname[i] > 0 && urlname[i] <= 63)
			for (j = urlname[i], i++; j > 0; j--, i++, k++)
				Url[k] = urlname[i];

		if (urlname[i] != 0)
		{
			Url[k] = '.';
			k++;
		}
	}

	Url[k] = '\0';
}


unsigned short replace_id(unsigned short OldID, SOCKADDR_IN temp, BOOL ifdone)
{
	id_trans_table[IDcount].oid = OldID;
	id_trans_table[IDcount].client = temp;
	id_trans_table[IDcount].done = ifdone;
	IDcount++; //ID转换表数目要更新

	return (unsigned short)(IDcount - 1);	//以表中下标作为新的ID
}

void PrintInfo(unsigned short newID,const char* getIP)
{
	//打印时间
	GetLocalTime(&TimeOfSys);
	//输出指定长度的字符串, 超长时不截断, 不足时左对齐:
	//printf("%-ns", str);            --n 为指定长度的10进制数值
	int Btime;
	int Ltime;
	Btime = ((((TimeOfSys.wDay - Day) * 24 + TimeOfSys.wHour - Hour) * 60 + TimeOfSys.wMinute - Minute) * 60) + TimeOfSys.wSecond - Second;
	Ltime = abs(TimeOfSys.wMilliseconds - Milliseconds);
	printf("%d.%d   %d", Btime, Ltime, newID);
	printf("    ");

	//在表中没有找到DNS请求中的域名
	if (getIP == NULL)
	{
		//中继功能
		printf("中继");
		printf("    ");
		//打印域名
		printf("%s", Url);
		printf("    ");
		//打印IP
		printf("\n");
	}

	//在表中找到DNS请求中的域名
	else
	{
		if (strcmp(getIP, "0.0.0.0") == 0)  //不良网站拦截
		{
			//屏蔽功能
			printf("屏蔽");
			printf("    ");
			//打印域名(加*)
			//打印域名
			printf("***%s", Url);
			printf("    ");
			//打印IP
			printf("%s\n", getIP);
		}

		//检索结果为普通IP地址，则向客户返回这个地址
		else
		{
			//服务器功能
			printf("Local服务器");
			printf("    ");
			//打印域名
			printf("***%s", Url);
			printf("    ");
			//打印IP
			printf("%s\n", getIP);
		}
	}
}


int main()
{

	//初始化 DLL
	WSADATA wsaData;
	WSAStartup(MAKEWORD(2, 2), &wsaData);

	//创建套接字
	SOCKET servSock = socket(AF_INET, SOCK_DGRAM, 0);
	SOCKET localSock = socket(AF_INET, SOCK_DGRAM, 0);

	//将套接口都设置为非阻塞
	int unBlock = 1;
	ioctlsocket(servSock, FIONBIO, (u_long FAR*) & unBlock);//将外部套街口设置为非阻塞
	ioctlsocket(localSock, FIONBIO, (u_long FAR*) & unBlock);//将本地套街口设置为非阻塞

	//绑定套接字
	SOCKADDR_IN serverName, clientName, localName;	//本地DNS、外部DNS和请求端三个网络套接字地址
	localName.sin_family = AF_INET;
	localName.sin_port = htons(PORT);
	localName.sin_addr.s_addr = inet_addr(LOCAL_DNS_ADDRESS);
	serverName.sin_family = AF_INET;
	serverName.sin_port = htons(PORT);
	serverName.sin_addr.s_addr = inet_addr(DEF_DNS_ADDRESS);

	//绑定本地服务器地址
	if (bind(localSock, (SOCKADDR*)&localName, sizeof(localName)))
	{
		printf("Bind 53 port failed.\n");
		exit(-1);
	}
	printf("Bind 53 port success.\n");

	char sendBuf[BUFSIZE]; //发送缓存
	char recvBuf[BUFSIZE]; //接收缓存
	char Path[] = "C://Users//32066//Desktop//jwks//dnsrelay.txt";

	int client_len, iSend, iRecv;

	read(Path);
	//保存系统时间
	GetLocalTime(&TimeOfSys);
	Day = TimeOfSys.wDay;
	Hour = TimeOfSys.wHour;
	Minute = TimeOfSys.wMinute;
	Milliseconds = TimeOfSys.wMilliseconds;

	const char* getIP;
	unsigned short NewID;
	unsigned short* pID;

	//下面是服务器的具体操作
	while (1)
	{
		client_len = sizeof(clientName);
		memset(recvBuf, 0, BUFSIZE); //将接收缓存先置为全0

		//接收DNS请求
		//函数：int recvfrom(int s, void* buf, int len, unsigned int flags, struct sockaddr* from, int* fromlen);
		//函数说明：recv()用来接收远程主机经指定的socket 传来的数据, 并把数据存到由参数buf 指向的内存空间, 参数len 为可接收数据的最大长度.
		//参数flags 一般设0, 其他数值定义请参考recv().参数from 用来指定欲传送的网络地址, 结构sockaddr 请参考bind().参数fromlen 为sockaddr 的结构长度.
		iRecv = recvfrom(localSock, recvBuf, sizeof(recvBuf), 0, (SOCKADDR*)&clientName, &client_len);
		//错误反馈
		if (iRecv == SOCKET_ERROR)
		{
			//printf("Recvfrom Failed: %s\n", strerror(WSAGetLastError()));
			continue; //强制开始下一次循环
		}
		else if (iRecv == 0)
		{
			break; //没东西，跳出循环0
		}
		else
		{
			//getURL(recvBuf, Url);//获取域名
			GetUrl(recvBuf, iRecv);				
			getIP = findIP(Url);		//在域名解析表中查找

			//printf("We have get the url: %s\n", Url);

			//printf("%d\n", find);

			//开始分情况讨论
			//在域名解析表中没有找到
			if (getIP == NULL)
			{
				//printf("We dont find this url, will get a new ID and forward to SERVER.\n");
				//ID转换
				//pID = new (unsigned short);
				pID = (unsigned short*)malloc(sizeof(unsigned short*));
				memcpy(pID, recvBuf, sizeof(unsigned short)); //报文前两字节为ID
				NewID = htons(replace_id(ntohs(*pID), clientName, FALSE));
				memcpy(recvBuf, &NewID, sizeof(unsigned short));

				//打印 时间 newID 功能 域名 IP
				PrintInfo(ntohs(NewID), getIP);

				//把recvbuf转发至指定的外部DNS服务器
				iSend = sendto(servSock, recvBuf, iRecv, 0, (SOCKADDR*)&serverName, sizeof(serverName));
				if (iSend == SOCKET_ERROR)
				{
					//printf("sendto Failed: %s\n", strerror(WSAGetLastError()));
					continue;
				}
				else if (iSend == 0)
					break;

				//delete pID; //释放动态分配的内存
				free(pID);
				clock_t start, stop; //定时
				double duration = 0;

				//接收来自外部DNS服务器的响应报文
				start = clock();
				iRecv = recvfrom(servSock, recvBuf, sizeof(recvBuf), 0, (SOCKADDR*)&clientName, &client_len);
				while ((iRecv == 0) || (iRecv == SOCKET_ERROR))
				{
					iRecv = recvfrom(servSock, recvBuf, sizeof(recvBuf), 0, (SOCKADDR*)&clientName, &client_len);
					stop = clock();
					duration = (double)(stop - start) / CLK_TCK;
					if (duration > 5)
					{
						printf("Long Time No Response From Server.\n");
						continue;
					}
				}
				//ID转换
				pID = (unsigned short*)malloc(sizeof(unsigned short*));
				memcpy(pID, recvBuf, sizeof(unsigned short)); //报文前两字节为ID
				int GetId = ntohs(*pID); //ntohs的功能：将网络字节序转换为主机字节序
				unsigned short oID = htons(id_trans_table[GetId].oid);
				memcpy(recvBuf, &oID, sizeof(unsigned short));
				id_trans_table[GetId].done = TRUE;

				//char* urlname;
				//memcpy(urlname, &(recvBuf[sizeof(DNSHDR)]), iRecv - 12);	//获取请求报文中的域名表示，要去掉DNS报文首部的12字节
				//char* NewIP;

				//打印 时间 newID 功能 域名 IP
				PrintInfo(ntohs(NewID), getIP);

				//从ID转换表中获取发出DNS请求者的信息
				clientName = id_trans_table[GetId].client;

				//printf("We get a answer from SERVER, now we give it back to client.\n");

				//把recvbuf转发至请求者处
				iSend = sendto(localSock, recvBuf, iRecv, 0, (SOCKADDR*)&clientName, sizeof(clientName));
				if (iSend == SOCKET_ERROR)
				{
					//printf("sendto Failed: %s\n\n", strerror(WSAGetLastError()));
					continue;
				}
				else if (iSend == 0)
					break;

				free(pID); //释放动态分配的内存
			}

			//在域名解析表中找到
			else
			{
				//printf("We have find this url.\n");
				//获取请求报文的ID
				pID = (unsigned short*)malloc(sizeof(unsigned short*));
				memcpy(pID, recvBuf, sizeof(unsigned short));

				//转换ID
				unsigned short nID = replace_id(ntohs(*pID), clientName, FALSE);

				//printf("We have get a new ID, now we will create an answer.\n");

				//打印 时间 newID 功能 域名 IP
				PrintInfo(nID, getIP);

				//构造响应报文头
				memcpy(sendBuf, recvBuf, iRecv); //拷贝请求报文
				unsigned short AFlag = htons(0x8180); //htons的功能：将主机字节序转换为网络字节序，即大端模式(big-endian) 0x8180为DNS响应报文的标志Flags字段
				memcpy(&sendBuf[2], &AFlag, sizeof(unsigned short)); //修改标志域,绕开ID的两字节

				//修改回答数域
				
				if (strcmp(getIP, "0.0.0.0") == 0)
					AFlag = htons(0x0000);	//屏蔽功能：回答数为0
				else
					AFlag = htons(0x0001);	//服务器功能：回答数为1
				memcpy(&sendBuf[6], &AFlag, sizeof(unsigned short)); //修改回答记录数，绕开ID两字节、Flags两字节、问题记录数两字节

				int curLen = 0; //不断更新的长度

				//构造DNS响应部分
				char answer[16];
				unsigned short Name = htons(0xc00c); //域名指针（偏移量）
				memcpy(answer, &Name, sizeof(unsigned short));
				curLen += sizeof(unsigned short);

				unsigned short TypeA = htons(0x0001); //类型
				memcpy(answer + curLen, &TypeA, sizeof(unsigned short));
				curLen += sizeof(unsigned short);

				unsigned short ClassA = htons(0x0001); //查询类
				memcpy(answer + curLen, &ClassA, sizeof(unsigned short));
				curLen += sizeof(unsigned short);

				//TTL四字节
				unsigned long timeLive = htonl(0x7b); //生存时间
				memcpy(answer + curLen, &timeLive, sizeof(unsigned long));
				curLen += sizeof(unsigned long);

				unsigned short RDLength = htons(0x0004); //资源数据长度
				memcpy(answer + curLen, &RDLength, sizeof(unsigned short));
				curLen += sizeof(unsigned short);

				unsigned long IP = (unsigned long)inet_addr(getIP); //inet_addr为IP地址转化函数
				memcpy(answer + curLen, &IP, sizeof(unsigned long));
				curLen += sizeof(unsigned long);
				curLen += iRecv;


				//请求报文和响应部分共同组成DNS响应报文存入sendbuf
				memcpy(sendBuf + iRecv, answer, curLen);


				iSend = sendto(localSock, sendBuf, curLen, 0, (SOCKADDR*)&clientName, sizeof(clientName));


				free(pID); //释放动态分配的内存

				//printf("\nThis loop is over, thanks.\n\n");
			}
		}
	}

	closesocket(servSock);
	closesocket(localSock);
	WSACleanup();				//释放ws2_32.dll动态链接库初始化时分配的资源

	system("pause");
	return 0;
}

