unsigned int hash(char *s) {
    unsigned int hashval;

    for (hashval = 0; *s != '\0'; s++)
        hashval = *s + 31 * hashval;
    return hashval % HASHSIZE;
}

CACHED *findInCache(char *domainName) {
    CACHED *np;

    for (np = hashtab[hash(domainName)]; np != NULL; np = np->next)
        if (strcmp(domainName, np->domainName) == 0)
            return np;
    return NULL;
}

CACHED *addToCache(CACHED *newEntry) {
    unsigned int hashval;
    CACHED *np;

    if ((np = findInCache(newEntry->domainName)) == NULL) {
        np = (CACHED *) malloc(sizeof(*np));
        if (np == NULL || (np->domainName = strdup(newEntry->domainName)) == NULL)
            return NULL;
        hashval = hash(newEntry->domainName);
        np->next = hashtab[hashval];
        hashtab[hashval] = np;
    } else
        free((void *) np->ipAddress);
    if ((np->ipAddress = newEntry->ipAddress) == 0)
        return NULL;
    return np;
}
